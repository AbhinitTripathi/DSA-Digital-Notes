class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int n = mat.size(), m = mat[0].size();
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<vector<int>> vis(n, vector<int>(m, 0));
        vis[0][0] = 1;
        
        int drow[2] = {0, 1};
        int dcol[2] = {1, 0};

        bool direction = true;
        vector<int> res;
        while(!q.empty()) {
            
            int size = q.size();
            vector<int> diagonal;

            for(int i = 0; i < size; ++i) {
                auto [r, c] = q.front(); q.pop();
                diagonal.push_back(mat[r][c]);
                
                for(int j = 0; j < 2; ++j) {
                    int nr = r + drow[j], nc = c + dcol[j];
                    if(nr < 0 || nr >= n || nc < 0 || nc >= m || vis[nr][nc]) {
                        continue;
                    }

                    q.push({nr, nc});
                    vis[nr][nc] = 1;
                }
                
            }

            if(direction) {
                res.insert(res.end(), diagonal.rbegin(), diagonal.rend());
            } else {
                res.insert(res.end(), diagonal.begin(), diagonal.end());
            }
            direction = !direction;
        }

        return res;
    }
};