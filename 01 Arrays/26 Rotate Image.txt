/*

BRUTE: 
-> 1st row of original matrix becoms last col of result
   2st row of original matrix becoms 2nd last col of result
-> Create a result matrix and traverese in it column whise from the back
-> In the original array traverse row wise and put  elements in result column wise

class Solution {
public: TC->O(n^2) SC->O(n^2)
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> rotated(n, vector<int>(n, 0));

        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                rotated[j][n-i-1] = matrix[i][j];
            }
        }

        matrix = rotated;
    }
};

OPTIMAL: TC->O(2n^2) SC->O(1)
-> Obesevation: The result matrix looks like it is being traneposed with row reversed
-> Transepose the matrix
-> Reverse each row

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();

        for(int i = 0; i < n; ++i) {
            for(int j = i; j < n; ++j) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        for(int i = 0; i < n; ++i) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

*/

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();

        for(int i = 0; i < n; ++i) {
            for(int j = i; j < n; ++j) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        for(int i = 0; i < n; ++i) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};