/*

BRUTE: Time-> O(n) Space-> O(n)
-> Take a temp array that holds all the distinct elements
-> count the number of zeroes
-> fill the temp's end with number of zeroes
-> replace all elements in array with temp

---------------------------------- BRUTE CODE ----------------------------------
void moveZeroes(vector<int>& nums) {
    int n = nums.size();
    vector<int> temp(n, 0);
    int i = 0;
    for(int j = 0; j < n; ++j) {
        if(nums[j] != 0) {
            temp[i] = nums[j];
            i++;
        }
    }

    nums = temp;
}

OPTIMAL: Time-> O(n) Spcae-> O(1)
-> Take 2 pointers
    - i searches for 0
    - j searches for non-zero
-> when a[j] != 0 swap el at i & j, increment both;

---------------------------------- OPTIMAL CODE ----------------------------------
void moveZeroes(vector<int>& a) {
    int n = a.size();
    int i = 0, j = 0;
    while(j < n) {
        if(a[j] != 0) {
            swap(a[i], a[j]);
            i++;
        }
        j++;
    }
}

*/

class Solution {
public:
    void moveZeroes(vector<int>& a) {
        int n = a.size();
        int i = 0, j = 0;
        while(j < n) {
            if(a[j] != 0) {
                swap(a[i], a[j]);
                i++;
            }
            j++;
        }
    }
};
