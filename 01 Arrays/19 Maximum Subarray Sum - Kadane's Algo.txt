/*

- Array can have +ve and -ve
- Sum of entire array may or may NOT be max sum

BRUTE: TC->O(n^3) SC->O(1);
-> Generate all Subarrays
-> calculate their sum and find maximum

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();

        int maxSum = -1e9;
        for(int s = 0; s < n; ++s) {
            for(int e = s; e < n; ++e) {
                int sum = 0;
                for(int i = s; i <= e; ++i) {
                   sum += nums[i];
                }
                maxSum = max(maxSum, sum);
            }
        }

        return maxSum
    }
};


BETTER: TC->O(n^2) SC->O(1)
-> Generate all subarrays
-> keep a running sum

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();

        int maxSum = -1e9;
        for(int s = 0; s < n; ++s) {
            int sum = 0;
            for(int e = s; e < n; ++e) {
                sum += nums[e];
                maxSum = max(maxSum, sum);
            }
        }

        return maxSum
    }
};

*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        int maxSum = -1e9;
        for(int i = 0; i < n; ++i) {
            sum += a[i];
            maxSum = max(maxSum, sum);
            if(sum < 0) sum = 0;
        }
        return maxSum;
    }
};