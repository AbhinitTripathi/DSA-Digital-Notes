

BRUTE TC-O(n^2) SC-O(n)
- Stand at every el & check all the elements to its right
- If all elements are smaller than current then it is a leader

vectorint findLeaders(vectorint &arr, int n) {
    vectorint ans;
    for(int i = 0; i  n; ++i) {
        int el = arr[i];
        bool all_small = true;
        for(int j = i+1; j  n; ++j) {
            if(arr[j]  el) {
                all_small = false;
                break;
            }
        }
        if(all_small) ans.push_back(el);
    }

    return ans
}

OPTIMAL TC-O(n) SC-O(1)
- In the Brute we need to look at all elements at the right on an el.
- Start from the back of the array so before reaching an element we would've seen everything on its right

vectorint findLeaders(vectorint &arr, int n) {
    vectorint ans;
    int maxi = arr[n-1];
    ans.push_back(arr[n-1]);
    
    for(int i = n-2; i = 0; i--) {
        if(arr[i]  maxi) {
            maxi = arr[i];
            ans.insert(ans.begin(), arr[i]);
        }
    }

    return ans;
}



#include bitsstdc++.h 
vectorint findLeaders(vectorint &arr, int n) {
    vectorint ans;
    int maxi = arr[n-1];
    ans.push_back(arr[n-1]);
    
    for(int i = n-2; i = 0; i--) {
        if(arr[i]  maxi) {
            maxi = arr[i];
            ans.insert(ans.begin(), arr[i]);
        }
    }

    return ans;
}