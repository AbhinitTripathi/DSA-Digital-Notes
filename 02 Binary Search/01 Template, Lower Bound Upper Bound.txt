BINARY SEARCH
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n - 1, mid = 0;
        while (l <= r) {
            mid = l + (r - l) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return -1;
    }
};

LOWER BOUND
int lowerBound(vector<int> arr, int n, int x) {
	int l = 0, h = n-1;
	int ans = n;
	while(l <= h) {
		int m = (l+h)/2;
		if(arr[m] >= x) {
			ans = m;
			h = m-1;
		} else {
			l = m+1;
		}
	}
	return ans;
}


UPPER BOUND
int lowerBound(vector<int> arr, int n, int x) {
	int l = 0, h = n-1;
	int ans = n;
	while(l <= h) {
		int m = (l+h)/2;
		if(arr[m] > x) {
			ans = m;
			h = m-1;
		} else {
			l = m+1;
		}
	}
	return ans;
}