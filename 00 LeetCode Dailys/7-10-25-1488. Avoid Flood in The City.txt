class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        int n = rains.size();
        vector<int> res(n, 1); // default 1 for dry days
        unordered_map<int, int> lastRain;
        set<int> dryDays;
        
        for (int i = 0; i < n; ++i) {
            int lake = rains[i];
            if (lake == 0) {
                dryDays.insert(i);
            } else {
                res[i] = -1; // raining day
                if (lastRain.count(lake)) {
                    auto it = dryDays.upper_bound(lastRain[lake]);
                    if (it == dryDays.end()) {
                        return {}; // no valid dry day
                    }
                    res[*it] = lake; // dry this lake
                    dryDays.erase(it);
                }
                lastRain[lake] = i;
            }
        }
        return res;
    }
};