class Solution {
private:
    vector<vector<int>> solve(vector<vector<int>> &h, int t) {
        int n = h.size(), m = h[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        queue<pair<int, int>> q;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (t == 0 && (i == 0 || j == 0)) {
                    q.push({i, j});
                    vis[i][j] = 1;
                }

                if (t == 1 && (i == n-1 || j == m-1)) {
                    q.push({i, j});
                    vis[i][j] = 1;
                }
            }
        }

        int dr[4] = {1, 0, 0, -1};
        int dc[4] = {0, -1, 1, 0};

        while (!q.empty()) {
            auto [r, c] = q.front();
            q.pop();

            for (int i = 0; i < 4; ++i) {
                int nr = r + dr[i], nc = c + dc[i];

                if (nr < 0 || nr >= n || nc < 0 || nc >= m) continue;

                if (!vis[nr][nc] && h[nr][nc] >= h[r][c]) {
                    vis[nr][nc] = 1;
                    q.push({nr, nc});
                }
            }
        }

        return vis;
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();

        vector<vector<int>> pacific_flow  = solve(heights, 0);
        vector<vector<int>> atlantis_flow = solve(heights, 1);

        vector<vector<int>> res;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (pacific_flow[i][j] && atlantis_flow[i][j])
                    res.push_back({i, j});
            }
        }

        return res;
    }
};