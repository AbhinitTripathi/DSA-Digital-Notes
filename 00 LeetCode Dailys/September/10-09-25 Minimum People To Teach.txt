class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        int m = languages.size();

        // Preprocess: put each person's languages in a set for quick lookup
        vector<unordered_set<int>> know(m);
        for (int i = 0; i < m; i++) {
            for (int lang : languages[i]) {
                know[i].insert(lang);
            }
        }

        // Collect all users who cannot communicate
        unordered_set<int> cant_talk;
        for (auto &f : friendships) {
            int u = f[0] - 1, v = f[1] - 1; // convert to 0-based

            bool can_talk = false;
            for (int lang : languages[u]) {
                if (know[v].count(lang)) {
                    can_talk = true;
                    break;
                }
            }
            if (!can_talk) {
                cant_talk.insert(u);
                cant_talk.insert(v);
            }
        }

        if (cant_talk.empty()) return 0;

        // Count frequencies of languages among those who can't talk
        vector<int> lang_count(n + 1, 0);
        for (int u : cant_talk) {
            for (int lang : languages[u]) {
                lang_count[lang]++;
            }
        }

        // Find the language that covers most people
        int max_known = 0;
        for (int lang = 1; lang <= n; lang++) {
            max_known = max(max_known, lang_count[lang]);
        }

        // Answer = people needing teaching
        return (int)cant_talk.size() - max_known;
    }
};
