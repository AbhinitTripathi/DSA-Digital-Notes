class Solution {
private:
    bool is_valid(vector<vector<char>>& board, int r, int c, char el) {
        int cnt = 0;
        for (int i = 0; i < 9; ++i) {
            if (board[r][i] == el) cnt++;
            if (board[i][c] == el) cnt++;
            if (board[(r/3)*3 + i/3][(c/3)*3 + i%3] == el) cnt++;
        }
        return cnt == 0;
    }
    
    bool solve(vector<vector<char>>& board) {
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] == '.') {
                    for (char k = '1'; k <= '9'; ++k) {
                        if (is_valid(board, i, j, k)) {
                            board[i][j] = k;
                            if (solve(board)) return true;
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};