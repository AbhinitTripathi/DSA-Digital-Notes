/*

BRUTE: TC->O(n^2) SC->O(1)
-> take 4 pointers that represent the valid subgrid
->  l -> r : t++
    t -> b : r--
    r -> l : b--
    b -> t : l++

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n = matrix.size(), m = matrix[0].size();
        int l = 0, t = 0, r = m-1, b = n-1;

        vector<int> res;
        while(t <= b && l <= r) {
            // left -> right
            for(int i = l; i <= r; i++) 
                res.push_back(matrix[t][i]);
            t++;

            // top -> bottom
            for(int i = t; i <= b; i++) 
                res.push_back(matrix[i][r]);
            r--;

            if(t <= b) { // extra guard needed here only
                // right -> left
                for(int i = r; i >= l; i--) 
                    res.push_back(matrix[b][i]);
                b--;
            }

            if(l <= r) { // and here
                // bottom -> top
                for(int i = b; i >= t; i--) 
                    res.push_back(matrix[i][l]);
                l++;
            }
        }

        return res;
    }
};
*/

