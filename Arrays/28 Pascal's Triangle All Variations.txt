PRINT ENTIRE TRIANGLE
#include <bits/stdc++.h>
using namespace std;

void makePascalsTraingle(vector<vector<int>>& pascals_triangle, int n) {
    pascals_triangle.push_back({1});
    
    for(int i = 1; i < n; ++i) {
        vector<int> row(i+1, 1);
        for(int j = 1; j < n-1; ++j) {
            row[j] = pascals_triangle[i-1][j] + pascals_triangle[i-1][j-1];
        }
        pascals_triangle.push_back(row);
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<vector<int>> pascals_triangle;
    makePascalsTraingle(pascals_triangle, n);
    
    for(int i = 0; i < n; ++i) {
        int m = pascals_triangle[i].size();
        for(int j = 0; j < m; ++j) {
            cout << pascals_triangle[i][j] << ' ';
        }
        cout << endl;
    }
}


GIVE Nth ROW
class Solution {
private:
    int nCr(int n, int r) {
        long long res = 1;

        for (int i = 0; i < r; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }

        return res;
    }
public:
    vector<int> getRow(int rowIndex) {
        int n = rowIndex+1;
        vector<int> res(n);
        for (int i = 0; i <= (rowIndex/2); ++i) {
            int el = nCr(rowIndex, i);
            res[i] = res[n-i-1] = el;
        }
        return res;
    }
};


GIVE EL AT Nth row and Rth COLUMN
class Solution {
private:
    int nCr(int n, int r) {
        long long res = 1;

        for (int i = 0; i < r; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }

        return res;
    }
};