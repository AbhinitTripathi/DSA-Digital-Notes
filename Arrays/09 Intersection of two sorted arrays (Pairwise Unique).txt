PROBLEM: Intersection of Two Sorted Arrays
-> Given two **sorted** arrays `a` and `b`, find their intersection.
-> Each element in the result must appear as many times as it shows in both arrays.

BRUTE: Time -> O(n * m), Space -> O(min(n, m))
-> For each element in array `a`, linearly search in array `b`
-> cahnge used element to -1 so it does not pair with someone else
---------------------------------- BRUTE CODE ----------------------------------
vector<int> intersect(vector<int>& a, vector<int>& b) {
    int n = a.size(), m = b.size();
    vector<int> res;

    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            if(a[i] == b[j]) {
                res.push_back(a[i]);
                b[j] = -1;
                break;
            }
        }
    }
    return res;
}

BETTER (using hashmap): Time -> O(n + m), Space -> O(n)
-> Store frequencies of elements from smaller array
-> Traverse other array and reduce count on match

---------------------------------- BETTER CODE ----------------------------------
vector<int> intersect(vector<int>& a, vector<int>& b) {
    unordered_map<int, int> freq;
    vector<int> res;

    for(int x : a) freq[x]++;

    for(int x : b) {
        if(freq[x] > 0) {
            res.push_back(x);
            freq[x]--;
        }
    }
    return res;
}

OPTIMAL (Two Pointer Technique): Time -> O(n + m), Space -> O(1)
-> Since arrays are sorted, use two pointers i and j
-> If a[i] == b[j], store and move both pointers
-> Else move the pointer of smaller value

---------------------------------- OPTIMAL CODE ----------------------------------
vector<int> intersect(vector<int>& a, vector<int>& b) {
    int n = a.size(), m = b.size();
    vector<int> res;
    int i = 0, j = 0;

    while(i < n && j < m) {
        if(a[i] == b[j]) {
            res.push_back(a[i]);
            i++;
            j++;
        } else if(a[i] < b[j]) {
            i++;
        } else {
            j++;
        }
    }
    return res;
}