/*

BRUTE: Time-> O(n * m) Space-> O(n)
-> Traverse each element of first array
-> For every element, linearly search it in second array
-> If found, add to answer and mark it visited to avoid duplicates

---------------------------------- BRUTE CODE ----------------------------------
vector<int> intersection(vector<int>& a, vector<int>& b) {
    vector<int> res;
    int n = a.size(), m = b.size();
    vector<bool> visited(m, false);

    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            if(a[i] == b[j] && !visited[j]) {
                res.push_back(a[i]);
                visited[j] = true;
                break;
            }
        }
    }
    return res;
}

BETTER: Time-> O(n+m) Space-> O(n+m)
-> Take two sets (since we need to search of for an element in b array and result) to optimize searching
-> For every element of b
	-> see if it is in "as" and "res"
	-> if not in reasult push it in else don't

---------------------------------- BETTER CODE ----------------------------------
vector<int> intersect(vector<int>& a, vector<int>& b) {
  
    // Put all elements of a[] in as
    unordered_set<int> as(a.begin(), a.end());  
  
    unordered_set<int> rs;                    
    vector<int> res;                            

    // Traverse through b[]
    for (int i = 0; i < b.size(); i++) {
      
        // If the element is in as and not yet in rs
        // a) Add it to the result set
        // b) Add it to the result array
        if (as.find(b[i]) != as.end() && 
            rs.find(b[i]) == rs.end()) {
            rs.insert(b[i]); 
            res.push_back(b[i]); 
        }
    }

    return res;
}

OPTIMAL: Time-> O(n + m) Space-> O(n)
Intersectio: Unique elements of BTH THE ARRAYS => The result will always be <=  n + m => we can remove elements
-> Store all elements of one array in a hash map
-> Traverse second array and check if element exists in the map
-> If found, add to result and remove from map to avoid duplicates

---------------------------------- OPTIMAL CODE ----------------------------------
vector<int> intersection(vector<int>& a, vector<int>& b) {
    unordered_map<int, int> mp;
    vector<int> res;

    for(int num : a) {
        mp[num]++;
    }

    for(int num : b) {
        if(mp[num] > 0) {
            res.push_back(num);
            mp[num] = 0;
        }
    }
    return res;
}

*/
